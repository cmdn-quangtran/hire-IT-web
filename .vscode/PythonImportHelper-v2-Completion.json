[
    {
        "label": "accounts.manager",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "accounts.manager",
        "description": "accounts.manager",
        "detail": "accounts.manager",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "extract_text",
        "importPath": "pdfminer.high_level",
        "description": "pdfminer.high_level",
        "isExtraImport": true,
        "detail": "pdfminer.high_level",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "phonenumbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "send_email_with_template",
        "importPath": "accounts.emails",
        "description": "accounts.emails",
        "isExtraImport": true,
        "detail": "accounts.emails",
        "documentation": {}
    },
    {
        "label": "IsEmployeePermission",
        "importPath": "accounts.permissions",
        "description": "accounts.permissions",
        "isExtraImport": true,
        "detail": "accounts.permissions",
        "documentation": {}
    },
    {
        "label": "extract_location",
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "isExtraImport": true,
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_phone_number",
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "isExtraImport": true,
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_skills",
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "isExtraImport": true,
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_text_from_pdf",
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "isExtraImport": true,
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "swagger_auto_schema",
        "importPath": "drf_yasg.utils",
        "description": "drf_yasg.utils",
        "isExtraImport": true,
        "detail": "drf_yasg.utils",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "GenericAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.api",
        "description": "cloudinary.api",
        "detail": "cloudinary.api",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_extractcv",
        "description": "accounts.migrations.0002_extractcv",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExtractCV',\n            fields=[\n                ('employee', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='extract_cv', serialize=False, to='accounts.employee')),\n                ('phone_number', models.CharField(blank=True, max_length=12, null=True)),",
        "detail": "accounts.migrations.0002_extractcv",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "PROVINCES_1",
        "kind": 5,
        "importPath": "accounts.constant",
        "description": "accounts.constant",
        "peekOfCode": "PROVINCES_1 = ['An Giang', 'Bà Rịa-Vũng Tàu', 'Bắc Giang', 'Bắc Kạn', 'Bạc Liêu', 'Bắc Ninh', 'Bến Tre', 'Bình Định', 'Bình Dương', 'Bình Phước', 'Bình Thuận', 'Cà Mau', 'Cần Thơ', 'Cao Bằng', 'Đà Nẵng', 'Đắk Lắk', 'Đắk Nông', 'Điện Biên', 'Đồng Nai', 'Đồng Tháp', 'Gia Lai', 'Hà Giang', 'Hà Nam', 'Hà Nội', 'Hà Tĩnh', 'Hải Dương', 'Hải Phòng', 'Hậu Giang', 'Hòa Bình', 'Hưng Yên', 'Khánh Hòa', 'Kiên Giang', 'Kon Tum', 'Lai Châu', 'Lâm Đồng', 'Lạng Sơn', 'Lào Cai', 'Long An', 'Nam Định', 'Nghệ An', 'Ninh Bình', 'Ninh Thuận', 'Phú Thọ', 'Phú Yên', 'Quảng Bình', 'Quảng Nam', 'Quảng Ngãi', 'Quảng Ninh', 'Quảng Trị', 'Sóc Trăng', 'Sơn La', 'Tây Ninh', 'Thái Bình', 'Thái Nguyên', 'Thanh Hóa', 'Thừa Thiên-Huế', \"Thừa Thiên Huế\", 'Tiền Giang', 'TP Hồ Chí Minh', 'Trà Vinh', 'Tuyên Quang', 'Vĩnh Long', 'Vĩnh Phúc', 'Yên Bái']\nPROVINCES_2 = [\n    \"An Giang\",\n    \"Ba Ria - Vung Tau\",\n    \"Bac Giang\",\n    \"Bac Kan\",\n    \"Bac Lieu\",\n    \"Bac Ninh\",\n    \"Ben Tre\",\n    \"Binh Dinh\",",
        "detail": "accounts.constant",
        "documentation": {}
    },
    {
        "label": "PROVINCES_2",
        "kind": 5,
        "importPath": "accounts.constant",
        "description": "accounts.constant",
        "peekOfCode": "PROVINCES_2 = [\n    \"An Giang\",\n    \"Ba Ria - Vung Tau\",\n    \"Bac Giang\",\n    \"Bac Kan\",\n    \"Bac Lieu\",\n    \"Bac Ninh\",\n    \"Ben Tre\",\n    \"Binh Dinh\",\n    \"Binh Duong\",",
        "detail": "accounts.constant",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "kind": 5,
        "importPath": "accounts.constant",
        "description": "accounts.constant",
        "peekOfCode": "PROVINCES = PROVINCES_1 + PROVINCES_2",
        "detail": "accounts.constant",
        "documentation": {}
    },
    {
        "label": "send_opt_via_email",
        "kind": 2,
        "importPath": "accounts.emails",
        "description": "accounts.emails",
        "peekOfCode": "def send_opt_via_email(email):\n    subject = 'Your account verification email'\n    otp = random.randint(100000, 999999)\n    message = f\"Your OTP is {otp}\"\n    email_from = settings.EMAIL_HOST\n    send_mail(subject, message, email_from, [email])\n    user_obj = User.objects.get(email=email)\n    user_obj.otp = otp\n    user_obj.save()\ndef send_email_with_template(email):",
        "detail": "accounts.emails",
        "documentation": {}
    },
    {
        "label": "send_email_with_template",
        "kind": 2,
        "importPath": "accounts.emails",
        "description": "accounts.emails",
        "peekOfCode": "def send_email_with_template(email):\n    email_from = settings.EMAIL_HOST\n    subject = 'Your account verification email'\n    otp = random.randint(100000, 999999)\n    try:\n        template = get_template('emails/verify_email.html')\n        context = {'otp': otp}\n        message = template.render(context)\n        send_mail(subject, '', email_from, [email], html_message=message)\n        user_obj = User.objects.get(email=email)",
        "detail": "accounts.emails",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "accounts.manager",
        "description": "accounts.manager",
        "peekOfCode": "class UserManager(BaseUserManager):\n    use_in_migrations = True\n    def _create_user(self, email, password, **extra_fields):\n        \"\"\"\n        Creates and saves a User with the given email and password.\n        \"\"\"\n        if not email:\n            raise ValueError('The given email must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)",
        "detail": "accounts.manager",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class User(AbstractUser):\n    list_roles = (\n        (1, 'Employee'),\n        (2, 'Recruiter')\n    )\n    username = None\n    email = models.EmailField(unique=True)\n    is_verified = models.BooleanField(default=False)\n    otp = models.CharField(max_length=6, null=True, blank=True)\n    role = models.IntegerField(default=0, choices=list_roles)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Employee(models.Model):\n    account = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True)\n    avatar_url = models.CharField(null=True, max_length=1000, blank=True,\n                                  default='https://res.cloudinary.com/dq6avgw6n/image/upload/v1683965956/2_lrrhqr.jpg')\n    pdf_file = models.CharField(null=True, max_length=1000, blank=True, default=None)\n    class Meta:\n        db_table = 'Employee'\n    def __str__(self):\n        return self.account.first_name + ' ' + self.account.last_name\nclass Recruiter(models.Model):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Recruiter",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Recruiter(models.Model):\n    account = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True)\n    company_name = models.CharField(null=True, blank=True, max_length=500)\n    address = models.CharField(null=True, blank=True, max_length=500)\n    avatar_url = models.CharField(null=True, max_length=1000, blank=True,\n                                  default='https://e7.pngegg.com/pngimages/643/98/png-clipart-computer-icons-avatar-mover-business-flat-design-corporate-elderly-care-microphone-heroes-thumbnail.png')\n    class Meta:\n        db_table = 'Recruiter'\n    def __str__(self):\n        return self.account.first_name + ' ' + self.account.last_name",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "JobRequirement",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class JobRequirement(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, auto_created=True)\n    recruiter = models.ForeignKey(Recruiter, on_delete=models.CASCADE, related_name='job_requirements')\n    job_name = models.CharField(max_length=255)\n    location = models.CharField(null=True, blank=True, max_length=100)\n    pdf_upload = models.CharField(null=True, max_length=1000, blank=True, default=None)\n    skills = models.TextField(null=True, blank=True)\n    active = models.BooleanField(default=True)\n    class Meta:\n        db_table = 'JobRequirement'",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "ExtractCV",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class ExtractCV(models.Model):\n    employee = models.OneToOneField(Employee, on_delete=models.CASCADE, primary_key=True, related_name=\"extract_cv\")\n    phone_number = models.CharField(null=True, blank=True, max_length=12)\n    location = models.CharField(null=True, blank=True, max_length=100)\n    skills = models.TextField()\n    active = models.BooleanField(default=True)\n    class Meta:\n        db_table = 'ExtractCV'",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "IsEmployeePermission",
        "kind": 6,
        "importPath": "accounts.permissions",
        "description": "accounts.permissions",
        "peekOfCode": "class IsEmployeePermission(BasePermission):\n    def has_permission(self, request, view):\n        try:\n            if request.user.role == 1:\n                return True\n            return False\n        except Exception:\n            print(str(Exception))\n            return False\nclass IsRecruiterermission(BasePermission):",
        "detail": "accounts.permissions",
        "documentation": {}
    },
    {
        "label": "IsRecruiterermission",
        "kind": 6,
        "importPath": "accounts.permissions",
        "description": "accounts.permissions",
        "peekOfCode": "class IsRecruiterermission(BasePermission):\n    def has_permission(self, request, view):\n        try:\n            if request.user.role == 2:\n                return True\n            return False\n        except Exception:\n            print(str(Exception))\n            return False",
        "detail": "accounts.permissions",
        "documentation": {}
    },
    {
        "label": "MyTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class MyTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        token['email'] = user.email\n        token['first_name'] = user.first_name\n        token['last_name'] = user.last_name\n        token['role'] = user.role\n        if user.role == 1:\n            avatar_url = User.objects.get(email=user.email).employee.avatar_url",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    id = serializers.SerializerMethodField()\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'first_name', 'last_name', 'role']\n    extra_kwargs = {\n        'password': {\n            'write_only': True\n        }\n    }",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegisterSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserRegisterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['email', 'password', 'first_name', 'last_name', 'role']\n    extra_kwargs = {\n        'password': {\n            'write_only': True\n        }\n    }\n    def create(self, validated_data):",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "RecruiterRegisterSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class RecruiterRegisterSerializer(serializers.ModelSerializer):\n    account = UserRegisterSerializer(required=True)\n    class Meta:\n        model = Recruiter\n        fields = ['company_name', 'address', 'account']\n    extra_kwargs = {\n        'password': {\n            'write_only': True\n        }\n    }",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "VertifyEmailSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class VertifyEmailSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    otp = serializers.CharField(max_length=6)\nclass LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField()\nclass EmployeeSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)\n    class Meta:\n        model = Employee",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    password = serializers.CharField()\nclass EmployeeSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)\n    class Meta:\n        model = Employee\n        fields = '__all__'\nclass RecruiterSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "EmployeeSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class EmployeeSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)\n    class Meta:\n        model = Employee\n        fields = '__all__'\nclass RecruiterSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)\n    class Meta:\n        model = Recruiter\n        fields = '__all__'",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "RecruiterSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class RecruiterSerializer(serializers.ModelSerializer):\n    account = UserSerializer(required=True)\n    class Meta:\n        model = Recruiter\n        fields = '__all__'\nclass PDFFileSerializer(serializers.Serializer):\n    pdf_file = serializers.FileField(validators=[FileExtensionValidator(['pdf'])])\nclass ExtractCVGetAll(serializers.ModelSerializer):\n    employee = serializers.SerializerMethodField()\n    class Meta:",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "PDFFileSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class PDFFileSerializer(serializers.Serializer):\n    pdf_file = serializers.FileField(validators=[FileExtensionValidator(['pdf'])])\nclass ExtractCVGetAll(serializers.ModelSerializer):\n    employee = serializers.SerializerMethodField()\n    class Meta:\n        model = ExtractCV\n        fields = '__all__'\n    def get_employee(self, obj):\n        return EmployeeSerializer(obj.employee).data\nclass ExtractCVCreateSerializer(serializers.Serializer):",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "ExtractCVGetAll",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class ExtractCVGetAll(serializers.ModelSerializer):\n    employee = serializers.SerializerMethodField()\n    class Meta:\n        model = ExtractCV\n        fields = '__all__'\n    def get_employee(self, obj):\n        return EmployeeSerializer(obj.employee).data\nclass ExtractCVCreateSerializer(serializers.Serializer):\n    location = serializers.CharField(max_length=255)\n    phone_number = serializers.CharField(max_length=20)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "ExtractCVCreateSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class ExtractCVCreateSerializer(serializers.Serializer):\n    location = serializers.CharField(max_length=255)\n    phone_number = serializers.CharField(max_length=20)\n    skills = serializers.CharField()",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "app_name = 'Account'\nrouter = routers.DefaultRouter()\nrouter.register(r'employees', EmployeeViewSet)\nrouter.register(r'employee/register', RegisterViewSet, basename='user/register')\nrouter.register(r'recruiter/register', RecruiterRegisterViewSet, basename='recruiter/register')\nurlpatterns = [\n    path('api/token/', csrf_exempt(MyTokenObtainPairView.as_view()), name='token_obtain_pair'),\n    path('api/token/refresh/', csrf_exempt(MyTokenRefreshView.as_view()), name='token_refresh'),\n    path('employee/login/', csrf_exempt(LoginView.as_view()), name='login'),\n    path('employee/verify-email/', VerifyEmail.as_view(), name='verify-email'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r'employees', EmployeeViewSet)\nrouter.register(r'employee/register', RegisterViewSet, basename='user/register')\nrouter.register(r'recruiter/register', RecruiterRegisterViewSet, basename='recruiter/register')\nurlpatterns = [\n    path('api/token/', csrf_exempt(MyTokenObtainPairView.as_view()), name='token_obtain_pair'),\n    path('api/token/refresh/', csrf_exempt(MyTokenRefreshView.as_view()), name='token_refresh'),\n    path('employee/login/', csrf_exempt(LoginView.as_view()), name='login'),\n    path('employee/verify-email/', VerifyEmail.as_view(), name='verify-email'),\n    path('employee/pdf-upload/', UploadPDFView.as_view(), name='pdf_upload'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/token/', csrf_exempt(MyTokenObtainPairView.as_view()), name='token_obtain_pair'),\n    path('api/token/refresh/', csrf_exempt(MyTokenRefreshView.as_view()), name='token_refresh'),\n    path('employee/login/', csrf_exempt(LoginView.as_view()), name='login'),\n    path('employee/verify-email/', VerifyEmail.as_view(), name='verify-email'),\n    path('employee/pdf-upload/', UploadPDFView.as_view(), name='pdf_upload'),\n    path('employee/verify-cv/', ExtractCVCreateView.as_view(), name='verify-job'),\n    path('employee/find-job/', ExtractCVView.as_view(), name='extract_cv'),\n]\nurlpatterns += router.urls",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "extract_text_from_pdf",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def extract_text_from_pdf(pdf_path):\n    response = requests.get(pdf_path)\n    pdf_bytes = BytesIO(response.content)\n    text = extract_text(pdf_bytes)\n    return text\ndef extract_phone_number(text) -> list:\n    phone_numbers = []\n    for match in phonenumbers.PhoneNumberMatcher(text, \"VN\"):\n        phone_numbers.append(re.sub(r'\\D', '', phonenumbers.format_number(match.number, phonenumbers.PhoneNumberFormat.E164)))\n    return phone_numbers",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_phone_number",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def extract_phone_number(text) -> list:\n    phone_numbers = []\n    for match in phonenumbers.PhoneNumberMatcher(text, \"VN\"):\n        phone_numbers.append(re.sub(r'\\D', '', phonenumbers.format_number(match.number, phonenumbers.PhoneNumberFormat.E164)))\n    return phone_numbers\ndef extract_location(text):\n    # List of location names in Vietnamese\n    locations = PROVINCES\n    # Find all matches of the location names in the text\n    matches = [loc for loc in locations if re.search(loc, text, re.IGNORECASE)]",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_location",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def extract_location(text):\n    # List of location names in Vietnamese\n    locations = PROVINCES\n    # Find all matches of the location names in the text\n    matches = [loc for loc in locations if re.search(loc, text, re.IGNORECASE)]\n    if matches:\n        if matches[0] in PROVINCES_2:\n            index = PROVINCES_2.index(matches[0])\n            return PROVINCES_1[index]\n        return matches[0]",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "extract_skills",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def extract_skills(nlp_text):\n    data = pd.read_csv(os.path.join(os.path.dirname(__file__), 'skills.csv'))\n    SKILLS = list(data.columns.values)\n    doc = nlp(nlp_text)\n    skills = []\n    for token in doc:\n        if token.text.lower() in SKILLS:\n            skills.append(token.text)\n    for chunk in doc.noun_chunks:\n        chunk_text = chunk.text.lower()",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "nlp",
        "kind": 5,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "nlp = spacy.load(\"en_core_web_sm\")\ndef extract_skills(nlp_text):\n    data = pd.read_csv(os.path.join(os.path.dirname(__file__), 'skills.csv'))\n    SKILLS = list(data.columns.values)\n    doc = nlp(nlp_text)\n    skills = []\n    for token in doc:\n        if token.text.lower() in SKILLS:\n            skills.append(token.text)\n    for chunk in doc.noun_chunks:",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "MyTokenObtainPairView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyTokenObtainPairView(TokenObtainPairView):\n    serializer_class = MyTokenObtainPairSerializer\nclass MyTokenRefreshView(TokenRefreshView):\n    def post(self, request, *args, **kwargs):\n        try: \n            serializer = self.get_serializer(data=request.data)\n            serializer.is_valid(raise_exception=True)\n            refresh = RefreshToken(request.data.get('refresh'))\n            response = {\n                \"status\": status.HTTP_200_OK,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "MyTokenRefreshView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class MyTokenRefreshView(TokenRefreshView):\n    def post(self, request, *args, **kwargs):\n        try: \n            serializer = self.get_serializer(data=request.data)\n            serializer.is_valid(raise_exception=True)\n            refresh = RefreshToken(request.data.get('refresh'))\n            response = {\n                \"status\": status.HTTP_200_OK,\n                \"message\": \"Refresh successful\",\n                \"data\": {",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "RegisterViewSet",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class RegisterViewSet(viewsets.ViewSet, generics.CreateAPIView):\n    queryset = User.objects.all()\n    permission_classes = (permissions.AllowAny,)\n    serializer_class = UserRegisterSerializer\n    def create(self, request, *args, **kwargs):\n        try:\n            if not User.objects.filter(email=request.data.get('email')).exists():\n                serializer = self.get_serializer(data=request.data)\n                if serializer.is_valid(raise_exception=True):\n                    account = serializer.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "RecruiterRegisterViewSet",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class RecruiterRegisterViewSet(viewsets.ViewSet, generics.CreateAPIView):\n    queryset = Recruiter.objects.all()\n    permission_classes = (permissions.AllowAny,)\n    serializer_class = RecruiterRegisterSerializer\n    def create(self, request, *args, **kwargs):\n        try:\n            user = request.data.get('account')\n            if not User.objects.filter(email=user['email']).exists():\n                serializer = self.get_serializer(data=request.data)\n                if serializer.is_valid(raise_exception=True):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "VerifyEmail",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class VerifyEmail(APIView):\n    @swagger_auto_schema(\n        request_body=VertifyEmailSerializer,  # Specify the serializer used for request data\n        responses={\n            status.HTTP_202_ACCEPTED: \"Register successful!\",  # Add response description\n            status.HTTP_400_BAD_REQUEST: \"Invalid data. Please enter again\",  # Add response description\n        },\n    )\n    def post(self, request, *args, **kwargs):\n        try:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LoginView(APIView):\n    @swagger_auto_schema(\n        request_body=LoginSerializer,  # Specify the serializer used for request data\n        responses={\n            status.HTTP_202_ACCEPTED: \"Login successful\",  # Add response description\n            status.HTTP_400_BAD_REQUEST: \"Invalid password\",  # Add response description\n            status.HTTP_406_NOT_ACCEPTABLE: \"Account is not verified. Please try again\",  # Add response description\n        },\n    )\n    def post(self, request, *args, **kwargs):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "EmployeeViewSet",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class EmployeeViewSet(viewsets.ModelViewSet):\n    queryset = Employee.objects.select_related('account')\n    permission_classes = [IsEmployeePermission, IsAuthenticated]\n    serializer_class = EmployeeSerializer\nclass UploadPDFView(APIView):\n    queryset = Employee.objects.select_related('account')\n    permission_classes = [IsEmployeePermission, IsAuthenticated]\n    parser_classes = (MultiPartParser, FormParser)\n    @swagger_auto_schema(\n        request_body=PDFFileSerializer,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UploadPDFView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UploadPDFView(APIView):\n    queryset = Employee.objects.select_related('account')\n    permission_classes = [IsEmployeePermission, IsAuthenticated]\n    parser_classes = (MultiPartParser, FormParser)\n    @swagger_auto_schema(\n        request_body=PDFFileSerializer,\n        operation_description=\"Upload a PDF file\",\n        responses={\n            200: \"{'url': 'https://cloudinary.com/your_url'}\",\n            400: \"{'error': 'Invalid file format'}\",",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ExtractCVView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ExtractCVView(GenericAPIView):\n    permission_classes = [IsEmployeePermission, IsAuthenticated]\n    serializer_class = EmployeeSerializer\n    @swagger_auto_schema(\n        operation_description=\"A custom description for the ExtractCVView\",\n        responses= {\n            status.HTTP_200_OK: \"Extract successful\",  # Add response description\n            status.HTTP_401_UNAUTHORIZED: \"Turned on Failed\",  # Add response description\n        }\n    )",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ExtractCVCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ExtractCVCreateView(generics.GenericAPIView):\n    permission_classes = [IsEmployeePermission, IsAuthenticated]\n    serializer_class = ExtractCVCreateSerializer\n    @swagger_auto_schema(\n        operation_description=\"A custom description for the ExtractCVCreateView\",\n        request_body=ExtractCVCreateSerializer,\n        responses= {\n            status.HTTP_200_OK: \"Turned on successfully\",  # Add response description\n            status.HTTP_401_UNAUTHORIZED: \"Turned on Failed\",  # Add response description\n        }",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0&66@6&_+6b1%h$u2cneif53cko(--tlv%d4(pobrm$z+epkd9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nAUTH_USER_MODEL = 'accounts.User'\n# Application definition",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-0&66@6&_+6b1%h$u2cneif53cko(--tlv%d4(pobrm$z+epkd9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\nAUTH_USER_MODEL = 'accounts.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\nAUTH_USER_MODEL = 'accounts.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nAUTH_USER_MODEL = 'accounts.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'accounts.User'\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'social_django.middleware.SocialAuthExceptionMiddleware',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\nSECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n       'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'hire_admin',\n        'PASSWORD':'Quang12345!',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECURE_REFERRER_POLICY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n       'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'hire_admin',\n        'PASSWORD':'Quang12345!',\n        'HOST': 'duyquang.postgres.database.azure.com',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n       'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'postgres',\n        'USER': 'hire_admin',\n        'PASSWORD':'Quang12345!',\n        'HOST': 'duyquang.postgres.database.azure.com',\n        'PORT': 5432,\n    }\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCORS_ORIGIN_ALLOW_ALL = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_ALLOW_ALL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "CORS_ORIGIN_ALLOW_ALL = True\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.gmail.com\"\nEMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'hire.itf@gmail.com'\nEMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'qussgisnacisefvq'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    )",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    )\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\n# DEFAULT_AUTHENTICATION_CLASSES\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    )\n}\nSWAGGER_SETTINGS = {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    )\n}\nSWAGGER_SETTINGS = {\n   'SECURITY_DEFINITIONS': {\n      'Bearer': {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n   'SECURITY_DEFINITIONS': {\n      'Bearer': {\n            'type': 'apiKey',\n            'name': 'Authorization',\n            'in': 'header'\n      }\n   }\n}\nSIMPLE_JWT = {",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': True,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "schema_view = swagger_get_schema_view(\n   openapi.Info(\n      title=\"HireIt Project API\",\n      default_version='v1',\n      description=\"API of project\",\n      contact=openapi.Contact(email=\"duyquang.tdq7@gmail.com\"),\n   ),\n   public=True,\n   permission_classes=[permissions.AllowAny],\n   patterns=[",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('admin/', admin.site.urls),\n    path('api/v1/', include('accounts.urls')),\n]",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]